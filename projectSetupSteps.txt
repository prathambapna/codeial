Steps done

1)npm init
2)setup folders->models,views,routes,controllers,config
3)npm install express(after this can check in package-json)
4)in index.js

const express=require('express');
const app=express();
const port=8000;

app.listen(port,function(error)
{
    if(error)
    {
        // console.log('Error:',err);
        // or
        console.log(`Error: $(error)`);
    }
    console.log(`Server is running on the port: ${port}`);
    
})

5)instead of nodemon index.js in terminal we can use
go in package json
under scripts add new tag "start":"nodemon index.js",
now instead of nodemon index.js use npm start

6)initialising git in terminal
git init
make new file .gitignore
in this write the name of folders file u dont want git to take(maybe bcoz they consume lot space which is not required)
we will write node_modules/
u can check with git status before and after that now node_modules folder is there or not

then finally git add .
git commit -m "first commit:...."

7)make index.js in route
inside route/index.js

const express=require('express');
const router=express.Router();

module.exports=router;

8)in index.js
//use express router(use before server starts  as middleware)
app.use('/',require('./routes'));

9)in home_controller in controllers
module.exports.home=function(req,res)
{
    return res.end('<h1>Express is up for Codeial!</h1>')
}

10)in routes/index
const homeController=require('../controllers/home_controller');
router.get('/',homeController.home);

11)in terminal
git add .
git commit -m "added controller and routes"

12)in users_controller.js in controllers
module.exports.profile=function(req,res){
    return res.end('<h1>User Profile</h1>');
}

13)create new route in route folder as users.js
const express=require('express');
const router=express.Router();

const usersController=require('../controllers/users_controller');

router.get('/profile',usersController.profile);
module.exports=router;

14) in routes/index.js
router.use('/users',require('./users'));

15)in terminal
git add .
git commit -m "added use_controller and routes"

16)npm install ejs

17)in index.js
app.set('view engine','ejs');
app.set('views','./views')

18)git add .
git commit -m "added view engine ejs"

19)created home.ejs in views
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
</head>
<body>
    <h1>
        Codeial /<%= title %>
    </h1>
</body>
</html>

20)in home_controller.js
module.exports.home=function(req,res)
{
    //return res.end('<h1>Express is up for Codeial!</h1>')
    return res.render('home',{
        title:'Home'
    });
}

21)user.ejs in view
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
</head>
<body>
    <h1>
        Codeial /<%= title %>
    </h1>
</body>
</html>

22)in users_controller.js
module.exports.profile=function(req,res){
    res.render('profile',{
        title:'User-profile'
    });
}

23)created _header.ejs 
<header>
    Page Header
</header>

and _footer.ejs
<footer>
    Page footer
</footer>

24)in home.ejs and profile.ejs
<body>
    <%- include('_header'); %>
    <h1>
        Codeial /<%= title %>
    </h1>
    <%- include('_footer'); %>
</body>

25)npm install express-ejs-layouts
26)in index.js

const expressLayouts=require('express-ejs-layouts');

//use it before using routes as it belongs to view which is going to  be rendered in routes so before it gets rendered we neet to specify layout
app.use(expressLayouts);

27)in layout.ejs in view
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
</head>
<body>
    <%- include('_header'); %>
    
    <!-- here body is the variable part for different layouts -->
    <%- body %>

    <%- include('_footer'); %>
</body>
</html>

28)change user_profile.ejs and home.ejs as
<!-- whatever u write here will be rendered to body of the layout -->
<h1>
    Codeial /Profile
</h1>

29)index.js
app.use(express.static('./assets'));
30)layout.css in assets
body{
    margin: 0;
    padding: 0;
    text-align: center;
}

31)in layout.ejs
this is for styles required by things other than variable part
<link rel="stylesheet" href="/css/layout.css">
    
32)in index.js for static files to be used by variable parts
//extract style and scripts from subpages into the layout after calling expresslayout
app.set('layout extractStyles',true);
app.set('layout extractScripts',true);

33)in layout.ejs
put style and script tag for static used by variable body
by writing <%-style%> and <%-script %> at appropriate places
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <link rel="stylesheet" href="/css/layout.css">
    <%- style%>
</head>
<body>
    <%- include('_header'); %>
    
    <!-- here body is the variable part for different layouts -->
    <%- body %>

    <%- include('_footer'); %>
    <%- script%>
</body>
</html>

34)npm install mongoose
35)inside mongoose.js in config
const mongoose=require('mongoose');
mongoose.connect('mongodb://localhost/codeial_development');

const db=mongoose.connection;
db.on('error',console.error.bind(console,"Error connecting to mongodb"));
db.once('open',function(){
    console.log('connected to database::MongoDB');
});

module.exports=db;

36)in index.js
const db=require('./config/mongoose');

37)creating schema
in user.js in models
const mongooese=require('mongoose');

const userSchema=new mongooese.Schema({
    email:{
        type:String,
        required:true,
        unique:true
    },
    password:{
        type:String,
        required:true
    },
    name:{
        type:String,
        required:true
    }

},
{
    timestamps:true
});

const User=mongooese.model('User',userSchema);
module.exports=User;

38)create user_sign_in.ejs and user_sign_up.ejs in views
<h1>
    Sign In
</h1>

39)to render the view go in user_controller.js
//render the sign up page
module.exports.signUp=function(req,res){
    return res.render('user_sign_up',{
        title:"Codeial | Sign Up"
    })
}
//render the sign in page
module.exports.signIn=function(req,res){
    return res.render('user_sign_in',{
        title:"Codeial | Sign In"
    })
}


40)in user.js in routes add the route
router.get('/sign-up',usersController.signUp);
router.get('/sign-in',usersController.signIn);

41)in user_sign_up.ejs

<form action="/users/create" method="POST">
    <input type="text" name="name" placeholder="Your Name" required>
    <input type="email" name="email" placeholder="Your email" required>
    <input type="password" name="password" placeholder="Password" required>
    <input type="password" name="confirm password" placeholder="Confirm Password" required>
    <input type="submit" value="Sign Up">
</form>

42)in user_sign_in.ejs
<form action="/users/create-session" method="POST">
    <input type="email" name="email" placeholder="Your email" required>
    <input type="password" name="password" placeholder="Password" required>
    <input type="submit" value="Sign In">
</form>

43)//used for params and query in post request
app.use(express.urlencoded());

44)starting with manual authentication
npm install cookie-parser

45)
const cookieParser=require('cookie-parser');
app.use(cookieParser());

46)in users_controller.js in controllers
//importing model
const User=require('../models/user');


//get the signup data
module.exports.create=function(req,res)
{
    //if password not equal to confirm password
    if(req.body.password!=req.body.confirm_password)
    {
        return res.redirect('back');
    }
    User.findOne({email:req.body.email},function(err,user){
        if(err){console.log('error in signing up');return;}

        if(!user)
        {
            User.create(req.body,function(err,user){
                if(err){console.log('error in signing up');return;}
                return res.redirect('/users/sign-in');
            })
        }
        else{
            return res.redirect('back');
        }
    })
} 

47)in users.js in routes
router.post('/create',usersController.create);

48)after signing up in browser now,u can now check in studio3T 

49)commiting and checkout back to master

50)npm install passport
   npm install passport-local 

51)passport-local-strategy.js in config
const passport=require('passport');
const LocalStrategy=require('passport-local').Strategy;
const User=require('../models/user');



//tell passport to use localstrategy
passport.use(new LocalStrategy({
        //always need to define usernameField with the one u use as username in schemma(one which is going to be unique)
        usernameField:'email'
    },
    function(email,password,done)
    {
        //find a user and establish identity
        User.findOne({
            //the first email is of schemma property defined by us, the second one is the one which function takes as argument
            email:email},function(err,user){
                if(err)
                {
                    console.log('Error in finding user -->Passport');
                    return done(err);
                }
                if(!user || user.password!=password){
                    console.log('Invalid Username/Password');
                    return done(null,false);
                }
                return done(null,user);
        });
    }
))

//serializing the user to decide which key is to be kept in the cookies
//basically after finding the user ,alloting cookie to it based on its id and then passport encrypts it automatically
passport.serializeUser(function(user,done){
    done(null,user.id);
});

//deserializing the user from the key in the cookies
passport.deserializeUser(function(id,done){
    User.findById(id,function(err,user){
        if(err)
        {
            console.log('Error in finding user -->Passport');
            return done(err);
        }
        return done(null,user); 
    });
});

module.exports=passport;

52)npm install express-session

53)index.js

//used for session cookie
const session=require('express-session');
const passport=require('passport');
const passportLocal=require('./config/passport-local-strategy');

//after setting the views,use session as middleware 
app.use(session({
    name:'codeial',
    //todo the secret before deployment in production mode
    secret:'blahsomething',
    saveUninitialized:false,
    resave:false,
    cookie:{
        maxAge:(1000*60*100)
        //100 min =>1000 millisec,60sec
    }
}))
app.use(passport.initialize());
app.use(passport.session());

54)in use_controller
//create session for sign in
module.exports.createSession=function(req,res)
{
    return res.redirect('/');
} 

55)in user.js in routes
//use passport as a middleware to authenticate

router.post('/create-session',passport.authenticate(
    'local',
    {failureRedirect:'/users/sign-in'}
),usersController.createSession);

/*
basically when create-session called it authenticates if done then call usercontroller.createSession otherwise redirect to sign-in
*/

55)in passport.js
//sending data of logged in user to views

//step 1]check if the user is authenticated
passport.checkAuthentication=function(req,res,next){
    //if the user is signed in ,then pass on the request to the next function(controllers action)
    if(req.isAuthenticated()){
        return next();
    }
    //if the user is not signed in
    return res.redirect('/users/sign-in');
}
passport.setAuthenticatedUser=function(req,res,next){
    if(req.isAuthenticated()){
        //req.user contains the current signed in  user from the session cookie and we are just sending this to the locals for the views
        res.locals.user=req.user;
    }
    next();
}

56)in users.js routes
router.get('/profile',passport.checkAuthentication,usersController.profile);

57)index.js
app.use(passport.setAuthenticatedUser)


58)in profile.ejs
<!-- user available bcoz we made res.locals.user=req.user in passport.js -->
<p><%= user.name%></p>
<p><%= user.email%></p>

59)in use_controller.js
//render the sign up page
module.exports.signUp=function(req,res){

    //we only want user to access signup page when not signed in that is not authenticated
    //otherwise redirect to profile page
    if(req.isAuthenticated()){
        return res.redirect('/users/profile');
    }
    return res.render('user_sign_up',{
        title:"Codeial | Sign Up"
    })
}
//render the sign in page
module.exports.signIn=function(req,res){
    if(req.isAuthenticated()){
        return res.redirect('/users/profile');
    }
    return res.render('user_sign_in',{
        title:"Codeial | Sign In"
    })
}

60)npm install connect-mongo

61)index.js
//using mongostore to store the session cookies so that after every restart of server user does not gets logged out
const MongoStore= require('connect-mongo');



//after setting the views,use session as middleware 
//mongo store is udes to store the session cookie in db
app.use(session({
    name:'codeial',
    //todo the secret before deployment in production mode
    secret:'blahsomething',
    saveUninitialized:false,
    resave:false,
    cookie:{
        maxAge:(1000*60*100)
        //100 min =>1000 millisec,60sec
    },
    store:MongoStore.create({
            //got this url from mongodb atlas application
            mongoUrl:'mongodb://localhost:27017',
            autoRemove:'disabled'
    },function(err)
    {
        console.log(err || 'connect-mongo-db setup ok');
    })
}))

62)header.ejs
<ul>
        <% if (locals.user) {%>
            <li>
                <a href="/users/profile">
                    <%=user.name%>
                </a>
            </li>
            <li>
                <a href="/users/sign-out">Sign Out</a>
            </li>
        <%}else{%>
            <li>
                <a href="/users/sign-in">Sign In</a>
            </li>
            <li>
                <a href="/users/sign-up">Sign Up</a>
            </li>
        <% } %>
    </ul>

63)user_controller.js

module.exports.destroySession=function(req,res){
    req.logout(function(err)
    {
        if(err){return res.redirect('back');}
        return res.redirect('/');
    });
}

64)user.js in routes
router.get('/sign-out',usersController.destroySession);

65)including sass
npm install node-sass-middleware

66)index.js
// setting up sass
const sassMiddleware=require('node-sass-middleware');
app.use(sassMiddleware({
    src:'/assets/scss',
    dest:'/assets/css',
    debug:true,
    outputStyle:'extended',
    prefix:'/css'
}))


67)moved two css files into scss and changing extension to .scss
68)